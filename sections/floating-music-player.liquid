{% unless template.name == 'index' %}
<div id="floating-music-player">
  <div id="track-title">Loading...</div>
  <img id="cd-icon" src="{{ section.settings.cd_image | image_url: width: 200 }}" alt="Music Disc" />
  <audio id="audio-player"></audio>
</div>

<style>
  #floating-music-player {
    position: fixed;
    bottom: 24px;
    right: 24px;
    width: {{ section.settings.cd_size | default: 60 }}px;
    height: {{ section.settings.cd_size | default: 60 }}px;
    z-index: 9999;
    cursor: pointer;
    display: flex;
    flex-direction: column;
    align-items: center;
    font-family: sans-serif;
  }

  #track-title {
    font-size: 11px;
    color: black;
    margin-bottom: 6px;
    max-width: 120px;
    text-align: center;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  #cd-icon {
    width: 100%;
    height: 100%;
    border-radius: 50%;
    transition: transform 0.4s ease;
  }

  #cd-icon.spin {
    animation: spin 2s linear infinite;
  }

  @keyframes spin {
    100% {
      transform: rotate(360deg);
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const tracks = [
      {
        title: "Track 1",
        url: "{{ section.settings.track_1_url }}"
      },
      {
        title: "Track 2",
        url: "{{ section.settings.track_2_url }}"
      },
      {
        title: "Track 3",
        url: "{{ section.settings.track_3_url }}"
      }
    ].filter(track => track.url);

    const cdIcon = document.getElementById("cd-icon");
    const audio = document.getElementById("audio-player");
    const title = document.getElementById("track-title");

    if (!tracks.length) {
      console.warn("No audio tracks configured.");
      title.textContent = "No tracks loaded.";
      return;
    }

    let currentTrack = 0;
    let isPlaying = false;
    let hasScrolled = false;
    const wasPaused = localStorage.getItem('yossi_music_paused') === 'true';

    function loadTrack(index) {
      if (!tracks[index]) return;
      audio.src = tracks[index].url;
      title.textContent = tracks[index].title || "Untitled Track";
    }

    function playMusic() {
      audio.play().then(() => {
        cdIcon.classList.add("spin");
        isPlaying = true;
        localStorage.setItem('yossi_music_paused', 'false'); // clear pause flag
      }).catch(err => {
        console.warn("Autoplay blocked:", err);
      });
    }

    function pauseMusic() {
      audio.pause();
      cdIcon.classList.remove("spin");
      isPlaying = false;
      localStorage.setItem('yossi_music_paused', 'true'); // mark as manually paused
    }

    cdIcon.addEventListener("click", () => {
      if (audio.paused) {
        playMusic();
      } else {
        pauseMusic();
      }
    });

    audio.addEventListener("ended", () => {
      currentTrack = (currentTrack + 1) % tracks.length;
      loadTrack(currentTrack);
      if (isPlaying) {
        playMusic();
      }
    });

    // Load first track
    loadTrack(currentTrack);

    // Scroll trigger for autoplay
    if (!wasPaused) {
      const onScroll = () => {
        if (!hasScrolled) {
          hasScrolled = true;
          playMusic();
          window.removeEventListener('scroll', onScroll);
        }
      };
      window.addEventListener('scroll', onScroll);
    } else {
      pauseMusic();
    }
  });
</script>
{% endunless %}

{% schema %}
{
  "name": "Floating Music Player",
  "tag": "section",
  "settings": [
    {
      "type": "image_picker",
      "id": "cd_image",
      "label": "CD Icon Image"
    },
    {
      "type": "range",
      "id": "cd_size",
      "label": "CD Size (px)",
      "min": 40,
      "max": 120,
      "step": 4,
      "default": 60
    },
    {
      "type": "url",
      "id": "track_1_url",
      "label": "Track 1 URL"
    },
    {
      "type": "url",
      "id": "track_2_url",
      "label": "Track 2 URL"
    },
    {
      "type": "url",
      "id": "track_3_url",
      "label": "Track 3 URL"
    }
  ],
  "presets": [
    {
      "name": "Floating Music Player"
    }
  ]
}
{% endschema %}

